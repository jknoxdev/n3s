-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.location_type
(
    location_type_id integer NOT NULL DEFAULT nextval('location_type_location_type_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default",
    CONSTRAINT location_type_pk PRIMARY KEY (location_type_id)
);

CREATE TABLE IF NOT EXISTS public.location
(
    location_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    address character varying COLLATE pg_catalog."default",
    address_two character varying COLLATE pg_catalog."default",
    city character varying COLLATE pg_catalog."default",
    state character varying COLLATE pg_catalog."default",
    lat real,
    "long" real,
    company_id smallint,
    location_type_id integer,
    CONSTRAINT location_pk PRIMARY KEY (location_id)
);

CREATE TABLE IF NOT EXISTS public.company
(
    company_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 2147483647 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    email character varying COLLATE pg_catalog."default",
    phone integer,
    date_founded integer,
    date_ended integer,
    "co-owned-with" integer,
    "co-owned-with-too" integer,
    CONSTRAINT company_pk PRIMARY KEY (company_id)
        INCLUDE(company_id)
);

CREATE TABLE IF NOT EXISTS public.person
(
    person_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    company_id smallint,
    location_id smallint,
    phone character varying COLLATE pg_catalog."default",
    asc_id smallint,
    first_name character varying COLLATE pg_catalog."default",
    last_name character varying COLLATE pg_catalog."default",
    middle_initial character(1) COLLATE pg_catalog."default",
    birthday date,
    hire_date date,
    term_date date,
    last_contacted date,
    device_list_id integer,
    mobile character varying COLLATE pg_catalog."default",
    email character varying COLLATE pg_catalog."default",
    username character varying COLLATE pg_catalog."default",
    password character varying COLLATE pg_catalog."default",
    CONSTRAINT person_pk PRIMARY KEY (person_id)
);

CREATE TABLE IF NOT EXISTS public.association
(
    association_id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    type character varying COLLATE pg_catalog."default",
    CONSTRAINT association_pk PRIMARY KEY (association_id)
);

CREATE TABLE IF NOT EXISTS public.device_list
(
    device_list_id integer NOT NULL DEFAULT nextval('device_list_device_list_id_seq'::regclass),
    CONSTRAINT device_list_pk PRIMARY KEY (device_list_id)
);

CREATE TABLE IF NOT EXISTS public.inventory
(
    inventory_id integer NOT NULL,
    client_id integer,
    customer_id integer,
    site_id integer,
    company_id integer,
    inventory_id_pk integer NOT NULL DEFAULT nextval('inventory_inventory_id_pk_seq'::regclass),
    device_list_id integer,
    CONSTRAINT inventory_pk PRIMARY KEY (inventory_id_pk)
);

CREATE TABLE IF NOT EXISTS public.city
(
    city_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    created_at timestamp without time zone,
    name character varying(255) COLLATE pg_catalog."default",
    latitude character varying(255) COLLATE pg_catalog."default",
    longitude character varying(255) COLLATE pg_catalog."default",
    population character varying(255) COLLATE pg_catalog."default",
    open_orders character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT city_id PRIMARY KEY (city_id)
        INCLUDE(city_id)
);

CREATE TABLE IF NOT EXISTS public.asset
(
    asset_id integer NOT NULL DEFAULT nextval('asset_asset_id_seq'::regclass),
    city_id integer,
    client_id integer,
    company_id integer,
    customer_id integer,
    device_id integer,
    inventory_id integer,
    device_list_id integer,
    location_id integer,
    warranty_id integer,
    asset_tag_id integer,
    device_type_id integer,
    deployment_id integer,
    installation_id integer,
    CONSTRAINT asset_pk PRIMARY KEY (asset_id)
);

CREATE TABLE IF NOT EXISTS public.device_type
(
    device_type_id integer NOT NULL,
    category character varying COLLATE pg_catalog."default",
    function character varying COLLATE pg_catalog."default",
    deployed_as character varying COLLATE pg_catalog."default",
    CONSTRAINT device_type_pkey PRIMARY KEY (device_type_id)
);

CREATE TABLE IF NOT EXISTS public.client
(
    name character varying COLLATE pg_catalog."default",
    client_id integer NOT NULL DEFAULT nextval('client_client_id_seq'::regclass),
    CONSTRAINT client_pk PRIMARY KEY (client_id)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    customer_id integer NOT NULL,
    client_id integer,
    company_id integer,
    name character varying COLLATE pg_catalog."default",
    person_id integer,
    CONSTRAINT customer_id PRIMARY KEY (customer_id)
);

CREATE TABLE IF NOT EXISTS public.phone
(
    phone_id integer NOT NULL DEFAULT nextval('phone_phone_id_seq'::regclass),
    person_id integer,
    location_id integer,
    phone_type_id integer,
    company_id integer,
    customer_id integer,
    device_id integer,
    manufacturer_id integer,
    serial_id integer,
    sip_id integer,
    phone_list_id integer,
    "number" character varying COLLATE pg_catalog."default",
    location_type_id integer,
    CONSTRAINT phone_pk PRIMARY KEY (phone_id)
);

CREATE TABLE IF NOT EXISTS public.phone_type
(
    phone_type_id integer NOT NULL DEFAULT nextval('phone_type_phone_type_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default",
    CONSTRAINT phone_type_pk PRIMARY KEY (phone_type_id)
);

CREATE TABLE IF NOT EXISTS public.device
(
    device_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    model_id smallint,
    manufacturer_id smallint,
    category_id smallint,
    serial_id smallint,
    hostname character varying COLLATE pg_catalog."default",
    warranty_id smallint,
    location_id smallint,
    device_type_id smallint,
    did_id integer,
    sip_id integer,
    inventory_id integer,
    person_device_list_id integer,
    device_list_id integer,
    ipv4 inet,
    mac macaddr8,
    CONSTRAINT device_pk PRIMARY KEY (device_id)
);

CREATE TABLE IF NOT EXISTS public.manufacturer
(
    manufacturer_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    CONSTRAINT manufacturer_pk PRIMARY KEY (manufacturer_id)
);

CREATE TABLE IF NOT EXISTS public.model
(
    model_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    CONSTRAINT model_pk PRIMARY KEY (model_id)
);

CREATE TABLE IF NOT EXISTS public.serial
(
    serial_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    serial_no character varying COLLATE pg_catalog."default",
    CONSTRAINT serial_pk PRIMARY KEY (serial_id)
);

CREATE TABLE IF NOT EXISTS public.sip
(
    sip_id smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 0 MAXVALUE 32767 CACHE 1 ),
    sip_no smallint,
    CONSTRAINT sip_pk PRIMARY KEY (sip_id)
);

CREATE TABLE IF NOT EXISTS public.phone_list
(
    phone_list_id integer NOT NULL DEFAULT nextval('phone_list_phone_list_id_seq'::regclass),
    CONSTRAINT phone_list_pk PRIMARY KEY (phone_list_id)
);

CREATE TABLE IF NOT EXISTS public.deployment
(
    deployment_id integer NOT NULL DEFAULT nextval('deployment_deployment_id_seq'::regclass),
    start_date date,
    end_date date,
    role character varying COLLATE pg_catalog."default",
    deployment_type_id integer,
    CONSTRAINT deployment_pk PRIMARY KEY (deployment_id)
);

CREATE TABLE IF NOT EXISTS public.deployment_type
(
    deployment_type_id integer NOT NULL DEFAULT nextval('deployment_type_deployment_type_id_seq'::regclass),
    role character varying COLLATE pg_catalog."default",
    CONSTRAINT deployment_type_pk PRIMARY KEY (deployment_type_id)
);

CREATE TABLE IF NOT EXISTS public.installation
(
    installation_id integer NOT NULL DEFAULT nextval('installation_installation_id_seq'::regclass),
    start_date date,
    end_date date,
    installation_type_id integer,
    asset_id integer,
    deployment_id integer,
    asset_tag_id integer,
    CONSTRAINT installation_pk PRIMARY KEY (installation_id)
);

CREATE TABLE IF NOT EXISTS public.installation_type
(
    installation_type_id integer NOT NULL DEFAULT nextval('installation_type_installation_type_id_seq'::regclass),
    role character varying COLLATE pg_catalog."default",
    "number" character varying COLLATE pg_catalog."default",
    type character varying COLLATE pg_catalog."default",
    CONSTRAINT installation_type_pk PRIMARY KEY (installation_type_id)
);

CREATE TABLE IF NOT EXISTS public.asset_tag
(
    asset_tag_id integer NOT NULL DEFAULT nextval('asset_tags_asset_tag_id_seq'::regclass),
    tag character varying COLLATE pg_catalog."default",
    CONSTRAINT asset_tags_pk PRIMARY KEY (asset_tag_id)
);

CREATE TABLE IF NOT EXISTS public.person_device_list
(
    person_id smallint,
    company_id smallint,
    person_device_list_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    CONSTRAINT person_device_list_pk PRIMARY KEY (person_device_list_id)
);

ALTER TABLE IF EXISTS public.location
    ADD CONSTRAINT company_id FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS fki_company_id
    ON public.location(company_id);


ALTER TABLE IF EXISTS public.location
    ADD CONSTRAINT location_fk FOREIGN KEY (location_type_id)
    REFERENCES public.location_type (location_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.person
    ADD CONSTRAINT asc_id FOREIGN KEY (asc_id)
    REFERENCES public.association (association_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.person
    ADD CONSTRAINT company_id FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.person
    ADD CONSTRAINT device_list_id FOREIGN KEY (device_list_id)
    REFERENCES public.device_list (device_list_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.person
    ADD CONSTRAINT location_id FOREIGN KEY (location_id)
    REFERENCES public.location (location_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_fk FOREIGN KEY (device_list_id)
    REFERENCES public.device_list (device_list_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_fk_city FOREIGN KEY (site_id)
    REFERENCES public.city (city_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_fk_client FOREIGN KEY (client_id)
    REFERENCES public.client (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_fk_company FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_fk_customer FOREIGN KEY (customer_id)
    REFERENCES public.customer (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk FOREIGN KEY (device_type_id)
    REFERENCES public.device_type (device_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_city FOREIGN KEY (city_id)
    REFERENCES public.city (city_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_client FOREIGN KEY (client_id)
    REFERENCES public.client (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_company FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_customer FOREIGN KEY (customer_id)
    REFERENCES public.customer (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_deployment FOREIGN KEY (deployment_id)
    REFERENCES public.deployment (deployment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_device FOREIGN KEY (device_id)
    REFERENCES public.device (device_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_device_list FOREIGN KEY (device_list_id)
    REFERENCES public.device_list (device_list_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_device_type FOREIGN KEY (asset_tag_id)
    REFERENCES public.asset_tag (asset_tag_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_installation_id FOREIGN KEY (installation_id)
    REFERENCES public.installation (installation_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_inventory FOREIGN KEY (inventory_id)
    REFERENCES public.inventory (inventory_id_pk) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_location FOREIGN KEY (location_id)
    REFERENCES public.location (location_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asset
    ADD CONSTRAINT asset_fk_tag_id FOREIGN KEY (asset_tag_id)
    REFERENCES public.asset_tag (asset_tag_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer
    ADD CONSTRAINT company_fk FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer
    ADD CONSTRAINT person_fk FOREIGN KEY (person_id)
    REFERENCES public.person (person_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk FOREIGN KEY (phone_type_id)
    REFERENCES public.phone_type (phone_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_company FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_customer FOREIGN KEY (customer_id)
    REFERENCES public.customer (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_device FOREIGN KEY (device_id)
    REFERENCES public.device (device_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_location FOREIGN KEY (location_id)
    REFERENCES public.location (location_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_location_type FOREIGN KEY (location_type_id)
    REFERENCES public.location_type (location_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_manufacturer FOREIGN KEY (manufacturer_id)
    REFERENCES public.manufacturer (manufacturer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_person FOREIGN KEY (person_id)
    REFERENCES public.person (person_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_phone_list FOREIGN KEY (phone_list_id)
    REFERENCES public.phone_list (phone_list_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT phone_fk_serial FOREIGN KEY (serial_id)
    REFERENCES public.serial (serial_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_device_list FOREIGN KEY (device_list_id)
    REFERENCES public.device_list (device_list_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_location FOREIGN KEY (location_id)
    REFERENCES public.location (location_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_location_id FOREIGN KEY (location_id)
    REFERENCES public.location (location_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_manufacturer_id FOREIGN KEY (manufacturer_id)
    REFERENCES public.manufacturer (manufacturer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_model_id FOREIGN KEY (model_id)
    REFERENCES public.model (model_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_serial_id FOREIGN KEY (serial_id)
    REFERENCES public.serial (serial_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.device
    ADD CONSTRAINT device_fk_sip_id FOREIGN KEY (sip_id)
    REFERENCES public.sip (sip_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.deployment
    ADD CONSTRAINT deployment_fk FOREIGN KEY (deployment_type_id)
    REFERENCES public.deployment_type (deployment_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.installation
    ADD CONSTRAINT installation_fk FOREIGN KEY (installation_type_id)
    REFERENCES public.installation_type (installation_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.installation
    ADD CONSTRAINT installation_fk_asset FOREIGN KEY (asset_id)
    REFERENCES public.asset (asset_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.installation
    ADD CONSTRAINT installation_fk_asset_tag FOREIGN KEY (asset_tag_id)
    REFERENCES public.asset_tag (asset_tag_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.installation
    ADD CONSTRAINT installation_fk_deployment FOREIGN KEY (deployment_id)
    REFERENCES public.deployment (deployment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.person_device_list
    ADD CONSTRAINT company_id FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.person_device_list
    ADD CONSTRAINT person_id FOREIGN KEY (person_id)
    REFERENCES public.person (person_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;